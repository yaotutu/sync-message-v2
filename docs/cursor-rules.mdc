---
description: 
globs: 
alwaysApply: false
---
# Cursor开发规则 - 调试排查指南

## 概述
当用户遇到API返回数据异常、数据库查询问题等情况时，应按照以下系统性思路进行排查。

## 问题排查标准流程

### 1. 问题描述分析
- **明确问题现象**：用户描述的具体问题（如"拿不到符合要求的验证码"）
- **确定关键参数**：URL参数、用户账号、时间范围等
- **理解业务逻辑**：涉及的功能模块和数据流

### 2. 数据链路追踪
按照数据流向进行系统性排查：

#### 2.1 前端页面检查
```bash
# 检查页面组件逻辑
- 查看页面组件代码 (src/app/view/page.jsx)
- 检查参数获取和API调用逻辑
- 验证错误处理和状态管理
```

#### 2.2 API接口检查
```bash
# 检查API路由实现
- 查看API路由代码 (src/app/api/public/messages/route.js)
- 检查参数验证和错误处理
- 验证数据库查询逻辑
```

#### 2.3 数据库数据验证
```bash
# 直接查询数据库验证数据
sqlite3 prisma/database.db ".tables"                    # 查看表结构
sqlite3 prisma/database.db ".schema messages"           # 查看表字段
sqlite3 prisma/database.db "SELECT * FROM cardLinks WHERE card_key = 'xxx';"  # 查询卡密链接
sqlite3 prisma/database.db "SELECT * FROM messages WHERE username = 'xxx';"   # 查询消息
```

### 3. 关键检查点

#### 3.1 卡密链接验证
```sql
-- 检查卡密链接是否存在且参数匹配
SELECT * FROM cardLinks 
WHERE card_key = '8KTRODCU7HFNSI5J' 
  AND app_name = 'ToDesk' 
  AND phone = '18567096245';
```

#### 3.2 用户数据验证
```sql
-- 检查用户是否存在
SELECT * FROM users WHERE username = 'xinzhizhu';
```

#### 3.3 消息数据验证
```sql
-- 检查消息是否存在且时间范围正确
SELECT id, sender_phone, smsContent, system_received_at 
FROM messages 
WHERE username = 'xinzhizhu' 
  AND sender_phone LIKE '%18567096245%' 
  AND system_received_at > [firstUsedAt时间戳]
ORDER BY system_received_at DESC;
```

#### 3.4 模板规则验证
```sql
-- 检查模板和规则配置
SELECT * FROM Template WHERE id = '[templateId]';
SELECT * FROM Rule WHERE template_id = '[templateId]' ORDER BY order_num;
```

### 4. 常见问题类型及排查方法

#### 4.1 数据不存在问题
**现象**：API返回空数据或错误
**排查步骤**：
1. 检查卡密链接是否存在
2. 检查用户是否存在
3. 检查消息数据是否存在
4. 检查时间范围是否正确

#### 4.2 规则过滤问题
**现象**：有原始数据但经过规则处理后无数据
**排查步骤**：
1. 检查模板规则配置
2. 验证规则模式（simple_include, regex等）
3. **重点检查字符匹配**：中文字符、标点符号、空格等
4. 检查规则处理逻辑

#### 4.3 时间范围问题
**现象**：数据存在但不在查询时间范围内
**排查步骤**：
1. 检查firstUsedAt时间戳
2. 验证消息的system_received_at时间
3. 检查时间比较逻辑

#### 4.4 字符编码问题
**现象**：看似相同但实际不同的字符
**排查步骤**：
1. 直接查看数据库中的原始字符
2. 对比规则中的字符和消息中的字符
3. 注意中文字符的细微差别（如"泄露"vs"泄漏"）

### 5. 调试工具和命令

#### 5.1 数据库查询工具
```bash
# 启动Prisma Studio（可视化数据库查看）
npx prisma studio

# 直接SQL查询
sqlite3 prisma/database.db "SELECT * FROM table_name;"
```

#### 5.2 日志查看
```bash
# 查看API请求日志
# 检查控制台输出的调试信息
# 关注关键时间戳和数据变化
```

#### 5.3 测试脚本
```javascript
// 创建测试脚本验证数据
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function debugData() {
    // 按照排查流程逐步验证
    // 1. 检查卡密链接
    // 2. 检查用户数据
    // 3. 检查消息数据
    // 4. 检查模板规则
}
```

### 6. 排查思路总结

#### 6.1 系统性思维
- **从外到内**：页面 → API → 数据库
- **从数据到逻辑**：先确认数据存在，再检查处理逻辑
- **从简单到复杂**：先排除基础问题，再深入复杂逻辑

#### 6.2 关键检查点
1. **数据存在性**：相关记录是否存在
2. **数据完整性**：必要字段是否完整
3. **数据一致性**：关联数据是否匹配
4. **时间正确性**：时间戳和范围是否正确
5. **字符准确性**：文本匹配是否精确

#### 6.3 常见陷阱
- **字符编码问题**：看似相同的中文字符实际不同
- **时间戳问题**：字符串vs数字类型的时间戳
- **字段名问题**：数据库字段名vs代码中的字段名
- **关联关系问题**：外键约束和数据一致性

### 7. 实际案例：ToDesk验证码问题

#### 问题描述
用户访问 `view?cardKey=8KTRODCU7HFNSI5J&appName=ToDesk&phone=18567096245` 无法获取验证码

#### 排查过程
1. **数据验证**：确认卡密链接、用户、消息数据都存在
2. **时间验证**：确认消息在firstUsedAt时间之后
3. **规则检查**：发现模板规则中的字符与消息内容不匹配
4. **问题定位**：规则中"泄漏"vs消息中"泄露"字符不同

#### 解决方案
更新数据库中的规则字符，确保与消息内容完全匹配

#### 经验总结
- 中文字符的细微差别容易被忽略
- 直接查看数据库原始数据是排查问题的有效方法
- 系统性排查比盲目猜测更有效率

## 使用说明

当用户报告类似问题时，应按照以下步骤进行：

1. **立即按照上述流程进行系统性排查**
2. **优先使用SQL直接查询数据库验证数据**
3. **重点关注字符匹配和时间范围问题**
4. **记录排查过程和解决方案**
5. **更新相关文档和测试用例**

## 注意事项

- 始终从数据验证开始，而不是直接修改代码
- 使用SQL直接查询比通过代码调试更快速准确
- 中文字符问题是最容易被忽略的陷阱
- 系统性排查比随机尝试更有效率
