---
description: 
globs: 
alwaysApply: true
---
# 项目结构规范

## 项目概述
这是一个基于Next.js的同步消息系统，使用Prisma作为ORM，Material UI作为UI组件库。

## 核心目录结构

### 应用入口
- [src/app/layout.jsx](mdc:src/app/layout.jsx) - 根布局组件
- [src/app/page.jsx](mdc:src/app/page.jsx) - 首页组件
- [next.config.mjs](mdc:next.config.mjs) - Next.js配置文件

### 页面路由结构
```
src/app/
├── admin/           # 管理员页面
│   ├── layout.tsx   # 管理员布局
│   ├── page.tsx     # 管理员首页
│   └── users/       # 用户管理页面
├── user/            # 用户页面
│   ├── layout.tsx   # 用户布局
│   ├── page.tsx     # 用户首页
│   ├── cardlinks/   # 卡密链接管理
│   └── messages/    # 消息管理
├── templates/       # 模板管理页面
└── view/           # 消息查看页面
```

### API路由结构
```
src/app/api/
├── admin/          # 管理员API
│   ├── templates/  # 模板管理API
│   └── users/      # 用户管理API
├── user/           # 用户API
│   ├── cardkeys/   # 卡密管理
│   ├── cardlinks/  # 卡密链接管理
│   ├── login/      # 用户登录
│   └── messages/   # 消息管理
├── public/         # 公共API
│   ├── messages/   # 公共消息接口
│   └── templates/  # 公共模板接口
└── webhook/        # Webhook接口
```

### 核心库文件
```
src/lib/
├── db/             # 数据库操作层
│   ├── index.js    # Prisma客户端初始化
│   ├── users.js    # 用户数据操作
│   ├── messages.js # 消息数据操作
│   ├── templates.js # 模板数据操作
│   ├── cards.js    # 卡密数据操作
│   └── cardlinks.js # 卡密链接数据操作
├── services/       # 业务逻辑层
│   ├── auth.js     # 认证服务
│   ├── users.js    # 用户服务
│   ├── messages.js # 消息服务
│   ├── templates.js # 模板服务
│   └── cardlinks.js # 卡密链接服务
└── utils/          # 工具函数
    ├── api-client.ts # API客户端封装
    ├── auth.js     # 认证工具
    ├── account.js  # 账号工具
    └── clipboard.ts # 剪贴板工具
```

### 组件库
```
src/components/
└── ConfirmDialog.jsx # 通用确认对话框组件
```

### 数据库配置
- [prisma/schema.prisma](mdc:prisma/schema.prisma) - 数据库模型定义
- [prisma/seed.mjs](mdc:prisma/seed.mjs) - 数据库种子数据

## 文件命名规范

### 页面文件
- 使用小写字母和连字符：`page.jsx`, `layout.jsx`
- 动态路由使用方括号：`[id]`, `[username]`

### API路由文件
- 使用 `route.ts` 或 `route.js` 命名
- 支持HTTP方法：GET, POST, PATCH, DELETE

### 组件文件
- 使用PascalCase：`ConfirmDialog.jsx`
- 公共组件放在 `src/components/` 目录

### 工具函数文件
- 使用camelCase：`api-client.ts`, `auth.js`
- 按功能分类存放

## 导入规范

### 相对路径导入
```javascript
// 正确 - 使用相对路径
import { Button } from '@mui/material';
import { userApi } from '@/lib/utils/api-client';
import prisma from '@/lib/db';

// 错误 - 避免绝对路径
import { Button } from 'src/components/Button';
```

### 别名导入
- 使用 `@/` 别名指向 `src/` 目录
- 在 [tsconfig.json](mdc:tsconfig.json) 中配置路径映射

## 开发环境配置
- [package.json](mdc:package.json) - 项目依赖和脚本
- [tailwind.config.js](mdc:tailwind.config.js) - Tailwind CSS配置
- [prettier.config.js](mdc:prettier.config.js) - 代码格式化配置
- [tsconfig.json](mdc:tsconfig.json) - TypeScript配置

## 文档结构
```
docs/
├── todo.md         # 开发待办事项
└── 安装文档.md     # 项目安装说明
```
