// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum MessageType {
  SMS
  EMAIL
}

model User {
  id                 Int        @id @default(autoincrement())
  username           String     @unique
  password           String
  webhookKey         String     @unique @map("webhook_key")
  createdAt          BigInt
  isAdmin            Boolean    @default(false)
  canManageTemplates Boolean    @default(false)
  expiryDate         String?    @default("20991231") @map("expiry_date")
  messages           Message[]
  cardLinks          CardLink[]
  templates          Template[]

  @@map("users")
}

model Message {
  id         Int         @id @default(autoincrement())
  username   String
  smsContent String
  recTime    BigInt?
  receivedAt BigInt
  type       MessageType
  user       User        @relation(fields: [username], references: [username])
}

model Template {
  id          String     @id
  name        String
  description String?
  createdAt   String
  updatedAt   String
  isPublic    Boolean    @default(false)
  username    String?
  rules       Rule[]
  cardLinks   CardLink[]
  user        User?      @relation(fields: [username], references: [username])

  @@index([username])
}

model Rule {
  id          String   @id
  templateId  String   @map("template_id")
  type        String
  mode        String
  pattern     String
  description String?
  orderNum    Int      @map("order_num")
  isActive    Boolean  @default(true) @map("is_active")
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model CardLink {
  id          String    @id
  cardKey     String    @unique @map("card_key")
  username    String
  appName     String    @map("app_name")
  phone       String?   @map("phone")
  createdAt   BigInt    @map("created_at")
  firstUsedAt BigInt?   @map("first_used_at")
  url         String
  templateId  String?   @map("template_id")
  user        User      @relation(fields: [username], references: [username])
  template    Template? @relation(fields: [templateId], references: [id])

  @@map("cardLinks")
}
